{
  "./flask/tests/test_basic.py": [
    {
      "class_name": "PrefixPathMiddleware",
      "class_methods": [
        "__init__",
        "__call__"
      ]
    },
    {
      "class_name": "MyException",
      "class_methods": []
    },
    {
      "class_name": "ForbiddenSubclass",
      "class_methods": []
    },
    {
      "class_name": "E1",
      "class_methods": []
    },
    {
      "class_name": "E2",
      "class_methods": []
    },
    {
      "class_name": "E3",
      "class_methods": []
    },
    {
      "class_name": "View",
      "class_methods": [
        "__init__",
        "index"
      ]
    }
  ],
  "./flask/tests/test_converters.py": [
    {
      "class_name": "ListConverter",
      "class_methods": [
        "to_python",
        "to_url"
      ]
    },
    {
      "class_name": "ContextConverter",
      "class_methods": [
        "to_python"
      ]
    }
  ],
  "./flask/tests/test_async.py": [
    {
      "class_name": "AppError",
      "class_methods": []
    },
    {
      "class_name": "BlueprintError",
      "class_methods": []
    },
    {
      "class_name": "AsyncView",
      "class_methods": []
    },
    {
      "class_name": "AsyncMethodView",
      "class_methods": []
    }
  ],
  "./flask/tests/test_session_interface.py": [
    {
      "class_name": "MySessionInterface",
      "class_methods": [
        "save_session",
        "open_session"
      ]
    }
  ],
  "./flask/tests/test_views.py": [
    {
      "class_name": "Index",
      "class_methods": [
        "dispatch_request"
      ]
    },
    {
      "class_name": "Index",
      "class_methods": [
        "get",
        "post"
      ]
    },
    {
      "class_name": "Index",
      "class_methods": [
        "get",
        "post"
      ]
    },
    {
      "class_name": "Other",
      "class_methods": [
        "get",
        "post"
      ]
    },
    {
      "class_name": "Index",
      "class_methods": [
        "get",
        "post"
      ]
    },
    {
      "class_name": "BetterIndex",
      "class_methods": [
        "delete"
      ]
    },
    {
      "class_name": "Index",
      "class_methods": [
        "dispatch_request"
      ]
    },
    {
      "class_name": "Index1",
      "class_methods": [
        "dispatch_request"
      ]
    },
    {
      "class_name": "Index2",
      "class_methods": [
        "dispatch_request"
      ]
    },
    {
      "class_name": "Index3",
      "class_methods": [
        "dispatch_request"
      ]
    },
    {
      "class_name": "Index",
      "class_methods": [
        "get"
      ]
    },
    {
      "class_name": "Index",
      "class_methods": [
        "get",
        "head"
      ]
    },
    {
      "class_name": "Index",
      "class_methods": [
        "dispatch_request"
      ]
    },
    {
      "class_name": "BaseView",
      "class_methods": []
    },
    {
      "class_name": "ChildView",
      "class_methods": [
        "get",
        "propfind"
      ]
    },
    {
      "class_name": "GetView",
      "class_methods": [
        "get"
      ]
    },
    {
      "class_name": "DeleteView",
      "class_methods": [
        "delete"
      ]
    },
    {
      "class_name": "GetDeleteView",
      "class_methods": []
    },
    {
      "class_name": "GetView",
      "class_methods": [
        "get"
      ]
    },
    {
      "class_name": "OtherView",
      "class_methods": [
        "post"
      ]
    },
    {
      "class_name": "View",
      "class_methods": []
    },
    {
      "class_name": "CountInit",
      "class_methods": [
        "__init__",
        "dispatch_request"
      ]
    }
  ],
  "./flask/tests/test_json_tag.py": [
    {
      "class_name": "TagDict",
      "class_methods": []
    },
    {
      "class_name": "Foo",
      "class_methods": [
        "__init__"
      ]
    },
    {
      "class_name": "TagFoo",
      "class_methods": [
        "check",
        "to_json",
        "to_python"
      ]
    },
    {
      "class_name": "Tag1",
      "class_methods": []
    },
    {
      "class_name": "Tag2",
      "class_methods": []
    }
  ],
  "./flask/tests/test_subclassing.py": [
    {
      "class_name": "SuppressedFlask",
      "class_methods": [
        "log_exception"
      ]
    }
  ],
  "./flask/tests/test_reqctx.py": [
    {
      "class_name": "TestGreenletContextCopying",
      "class_methods": [
        "test_greenlet_context_copying",
        "test_greenlet_context_copying_api"
      ]
    },
    {
      "class_name": "SessionError",
      "class_methods": []
    },
    {
      "class_name": "FailingSessionInterface",
      "class_methods": [
        "open_session"
      ]
    },
    {
      "class_name": "CustomFlask",
      "class_methods": []
    },
    {
      "class_name": "PathAwareSessionInterface",
      "class_methods": [
        "get_cookie_name"
      ]
    },
    {
      "class_name": "CustomFlask",
      "class_methods": []
    }
  ],
  "./flask/tests/test_blueprints.py": [
    {
      "class_name": "MyDecoratorException",
      "class_methods": []
    },
    {
      "class_name": "MyFunctionException",
      "class_methods": []
    },
    {
      "class_name": "MyBlueprint",
      "class_methods": [
        "get_send_file_max_age"
      ]
    }
  ],
  "./flask/tests/test_config.py": [
    {
      "class_name": "Base",
      "class_methods": []
    },
    {
      "class_name": "Test",
      "class_methods": []
    },
    {
      "class_name": "Config",
      "class_methods": []
    },
    {
      "class_name": "Flask",
      "class_methods": []
    }
  ],
  "./flask/tests/test_user_error_handler.py": [
    {
      "class_name": "TestGenericHandlers",
      "class_methods": [
        "app",
        "report_error",
        "test_handle_class_or_code",
        "test_handle_generic_http",
        "test_handle_generic"
      ]
    },
    {
      "class_name": "CustomException",
      "class_methods": []
    },
    {
      "class_name": "ParentException",
      "class_methods": []
    },
    {
      "class_name": "ChildExceptionUnregistered",
      "class_methods": []
    },
    {
      "class_name": "ChildExceptionRegistered",
      "class_methods": []
    },
    {
      "class_name": "ForbiddenSubclassRegistered",
      "class_methods": []
    },
    {
      "class_name": "ForbiddenSubclassUnregistered",
      "class_methods": []
    },
    {
      "class_name": "Custom",
      "class_methods": []
    }
  ],
  "./flask/tests/test_helpers.py": [
    {
      "class_name": "FakePath",
      "class_methods": [
        "__init__",
        "__fspath__"
      ]
    },
    {
      "class_name": "PyBytesIO",
      "class_methods": [
        "__init__",
        "__getattr__"
      ]
    },
    {
      "class_name": "TestSendfile",
      "class_methods": [
        "test_send_file",
        "test_static_file",
        "test_send_from_directory"
      ]
    },
    {
      "class_name": "TestUrlFor",
      "class_methods": [
        "test_url_for_with_anchor",
        "test_url_for_with_scheme",
        "test_url_for_with_scheme_not_external",
        "test_url_for_with_alternating_schemes",
        "test_url_with_method",
        "test_url_for_with_self"
      ]
    },
    {
      "class_name": "TestNoImports",
      "class_methods": [
        "test_name_with_import_error"
      ]
    },
    {
      "class_name": "TestStreaming",
      "class_methods": [
        "test_streaming_with_context",
        "test_streaming_with_context_as_decorator",
        "test_streaming_with_context_and_custom_close",
        "test_stream_keeps_session"
      ]
    },
    {
      "class_name": "TestHelpers",
      "class_methods": [
        "test_get_debug_flag",
        "test_make_response"
      ]
    },
    {
      "class_name": "MyAborter",
      "class_methods": []
    },
    {
      "class_name": "MyFlask",
      "class_methods": []
    },
    {
      "class_name": "My900Error",
      "class_methods": []
    },
    {
      "class_name": "StaticFileApp",
      "class_methods": [
        "get_send_file_max_age"
      ]
    },
    {
      "class_name": "MyView",
      "class_methods": [
        "get",
        "post"
      ]
    },
    {
      "class_name": "Wrapper",
      "class_methods": [
        "__init__",
        "__iter__",
        "close",
        "__next__"
      ]
    }
  ],
  "./flask/tests/test_json.py": [
    {
      "class_name": "FixedOffset",
      "class_methods": [
        "__init__",
        "utcoffset",
        "tzname",
        "dst"
      ]
    },
    {
      "class_name": "X",
      "class_methods": [
        "__init__"
      ]
    },
    {
      "class_name": "CustomProvider",
      "class_methods": [
        "object_hook",
        "loads"
      ]
    },
    {
      "class_name": "ObjectWithHTML",
      "class_methods": [
        "__html__"
      ]
    }
  ],
  "./flask/tests/test_cli.py": [
    {
      "class_name": "TestRoutes",
      "class_methods": [
        "app",
        "invoke",
        "expect_order",
        "test_simple",
        "test_sort",
        "test_all_methods",
        "test_no_routes",
        "test_subdomain",
        "test_host"
      ]
    },
    {
      "class_name": "Module",
      "class_methods": []
    },
    {
      "class_name": "Module",
      "class_methods": []
    },
    {
      "class_name": "Module",
      "class_methods": []
    },
    {
      "class_name": "Module",
      "class_methods": [
        "create_app"
      ]
    },
    {
      "class_name": "Module",
      "class_methods": [
        "create_app"
      ]
    },
    {
      "class_name": "Module",
      "class_methods": [
        "make_app"
      ]
    },
    {
      "class_name": "Module",
      "class_methods": [
        "create_app"
      ]
    },
    {
      "class_name": "Module",
      "class_methods": [
        "create_app"
      ]
    },
    {
      "class_name": "Module",
      "class_methods": []
    },
    {
      "class_name": "Module",
      "class_methods": []
    },
    {
      "class_name": "Module",
      "class_methods": [
        "create_app"
      ]
    },
    {
      "class_name": "Module",
      "class_methods": [
        "create_app"
      ]
    },
    {
      "class_name": "MockCtx",
      "class_methods": [
        "exit"
      ]
    }
  ],
  "./flask/tests/test_templating.py": [
    {
      "class_name": "MyFlask",
      "class_methods": [
        "create_global_jinja_loader"
      ]
    },
    {
      "class_name": "_TestHandler",
      "class_methods": [
        "handle"
      ]
    },
    {
      "class_name": "CustomEnvironment",
      "class_methods": []
    },
    {
      "class_name": "CustomFlask",
      "class_methods": []
    }
  ],
  "./flask/tests/test_appctx.py": [
    {
      "class_name": "CustomRequestGlobals",
      "class_methods": [
        "__init__"
      ]
    }
  ],
  "./flask/tests/test_regression.py": [
    {
      "class_name": "Foo",
      "class_methods": []
    }
  ],
  "./flask/tests/test_testing.py": [
    {
      "class_name": "Namespace",
      "class_methods": [
        "add"
      ]
    },
    {
      "class_name": "SubRunner",
      "class_methods": []
    },
    {
      "class_name": "NS",
      "class_methods": []
    }
  ],
  "./flask/tests/type_check/typing_route.py": [
    {
      "class_name": "StatusJSON",
      "class_methods": []
    },
    {
      "class_name": "RenderTemplateView",
      "class_methods": [
        "__init__",
        "dispatch_request"
      ]
    }
  ],
  "./flask/examples/tutorial/tests/conftest.py": [
    {
      "class_name": "AuthActions",
      "class_methods": [
        "__init__",
        "login",
        "logout"
      ]
    }
  ],
  "./flask/examples/tutorial/tests/test_db.py": [
    {
      "class_name": "Recorder",
      "class_methods": []
    }
  ],
  "./flask/src/flask/sessions.py": [
    {
      "class_name": "SessionMixin",
      "class_methods": [
        "permanent",
        "permanent"
      ]
    },
    {
      "class_name": "SecureCookieSession",
      "class_methods": [
        "__init__",
        "__getitem__",
        "get",
        "setdefault"
      ]
    },
    {
      "class_name": "NullSession",
      "class_methods": [
        "_fail"
      ]
    },
    {
      "class_name": "SessionInterface",
      "class_methods": [
        "make_null_session",
        "is_null_session",
        "get_cookie_name",
        "get_cookie_domain",
        "get_cookie_path",
        "get_cookie_httponly",
        "get_cookie_secure",
        "get_cookie_samesite",
        "get_cookie_partitioned",
        "get_expiration_time",
        "should_set_cookie",
        "open_session",
        "save_session"
      ]
    },
    {
      "class_name": "SecureCookieSessionInterface",
      "class_methods": [
        "get_signing_serializer",
        "open_session",
        "save_session"
      ]
    }
  ],
  "./flask/src/flask/config.py": [
    {
      "class_name": "ConfigAttribute",
      "class_methods": [
        "__init__",
        "__get__",
        "__get__",
        "__get__",
        "__set__"
      ]
    },
    {
      "class_name": "Config",
      "class_methods": [
        "__init__",
        "from_envvar",
        "from_prefixed_env",
        "from_pyfile",
        "from_object",
        "from_file",
        "from_mapping",
        "get_namespace",
        "__repr__"
      ]
    }
  ],
  "./flask/src/flask/templating.py": [
    {
      "class_name": "Environment",
      "class_methods": [
        "__init__"
      ]
    },
    {
      "class_name": "DispatchingJinjaLoader",
      "class_methods": [
        "__init__",
        "get_source",
        "_get_source_explained",
        "_get_source_fast",
        "_iter_loaders",
        "list_templates"
      ]
    }
  ],
  "./flask/src/flask/blueprints.py": [
    {
      "class_name": "Blueprint",
      "class_methods": [
        "__init__",
        "get_send_file_max_age",
        "send_static_file",
        "open_resource"
      ]
    }
  ],
  "./flask/src/flask/cli.py": [
    {
      "class_name": "NoAppException",
      "class_methods": []
    },
    {
      "class_name": "ScriptInfo",
      "class_methods": [
        "__init__",
        "load_app"
      ]
    },
    {
      "class_name": "AppGroup",
      "class_methods": [
        "command",
        "group"
      ]
    },
    {
      "class_name": "FlaskGroup",
      "class_methods": [
        "__init__",
        "_load_plugin_commands",
        "get_command",
        "list_commands",
        "make_context",
        "parse_args"
      ]
    },
    {
      "class_name": "CertParamType",
      "class_methods": [
        "__init__",
        "convert"
      ]
    },
    {
      "class_name": "SeparatedPathType",
      "class_methods": [
        "convert"
      ]
    }
  ],
  "./flask/src/flask/wrappers.py": [
    {
      "class_name": "Request",
      "class_methods": [
        "max_content_length",
        "max_content_length",
        "max_form_memory_size",
        "max_form_memory_size",
        "max_form_parts",
        "max_form_parts",
        "endpoint",
        "blueprint",
        "blueprints",
        "_load_form_data",
        "on_json_loading_failed"
      ]
    },
    {
      "class_name": "Response",
      "class_methods": [
        "max_cookie_size"
      ]
    }
  ],
  "./flask/src/flask/app.py": [
    {
      "class_name": "Flask",
      "class_methods": [
        "__init__",
        "get_send_file_max_age",
        "send_static_file",
        "open_resource",
        "open_instance_resource",
        "create_jinja_environment",
        "create_url_adapter",
        "raise_routing_exception",
        "update_template_context",
        "make_shell_context",
        "run",
        "test_client",
        "test_cli_runner",
        "handle_http_exception",
        "handle_user_exception",
        "handle_exception",
        "log_exception",
        "dispatch_request",
        "full_dispatch_request",
        "finalize_request",
        "make_default_options_response",
        "ensure_sync",
        "async_to_sync",
        "url_for",
        "make_response",
        "preprocess_request",
        "process_response",
        "do_teardown_request",
        "do_teardown_appcontext",
        "app_context",
        "request_context",
        "test_request_context",
        "wsgi_app",
        "__call__"
      ]
    }
  ],
  "./flask/src/flask/debughelpers.py": [
    {
      "class_name": "UnexpectedUnicodeError",
      "class_methods": []
    },
    {
      "class_name": "DebugFilesKeyError",
      "class_methods": [
        "__init__",
        "__str__"
      ]
    },
    {
      "class_name": "FormDataRoutingRedirect",
      "class_methods": [
        "__init__"
      ]
    },
    {
      "class_name": "newcls",
      "class_methods": [
        "__getitem__"
      ]
    }
  ],
  "./flask/src/flask/ctx.py": [
    {
      "class_name": "_AppCtxGlobals",
      "class_methods": [
        "__getattr__",
        "__setattr__",
        "__delattr__",
        "get",
        "pop",
        "setdefault",
        "__contains__",
        "__iter__",
        "__repr__"
      ]
    },
    {
      "class_name": "AppContext",
      "class_methods": [
        "__init__",
        "push",
        "pop",
        "__enter__",
        "__exit__"
      ]
    },
    {
      "class_name": "RequestContext",
      "class_methods": [
        "__init__",
        "copy",
        "match_request",
        "push",
        "pop",
        "__enter__",
        "__exit__",
        "__repr__"
      ]
    }
  ],
  "./flask/src/flask/testing.py": [
    {
      "class_name": "EnvironBuilder",
      "class_methods": [
        "__init__",
        "json_dumps"
      ]
    },
    {
      "class_name": "FlaskClient",
      "class_methods": [
        "__init__",
        "session_transaction",
        "_copy_environ",
        "_request_from_builder_args",
        "open",
        "__enter__",
        "__exit__"
      ]
    },
    {
      "class_name": "FlaskCliRunner",
      "class_methods": [
        "__init__",
        "invoke"
      ]
    }
  ],
  "./flask/src/flask/views.py": [
    {
      "class_name": "View",
      "class_methods": [
        "dispatch_request",
        "as_view"
      ]
    },
    {
      "class_name": "MethodView",
      "class_methods": [
        "__init_subclass__",
        "dispatch_request"
      ]
    }
  ],
  "./flask/src/flask/sansio/blueprints.py": [
    {
      "class_name": "BlueprintSetupState",
      "class_methods": [
        "__init__",
        "add_url_rule"
      ]
    },
    {
      "class_name": "Blueprint",
      "class_methods": [
        "__init__",
        "_check_setup_finished",
        "record",
        "record_once",
        "make_setup_state",
        "register_blueprint",
        "register",
        "_merge_blueprint_funcs",
        "add_url_rule",
        "app_template_filter",
        "add_app_template_filter",
        "app_template_test",
        "add_app_template_test",
        "app_template_global",
        "add_app_template_global",
        "before_app_request",
        "after_app_request",
        "teardown_app_request",
        "app_context_processor",
        "app_errorhandler",
        "app_url_value_preprocessor",
        "app_url_defaults"
      ]
    }
  ],
  "./flask/src/flask/sansio/app.py": [
    {
      "class_name": "App",
      "class_methods": [
        "__init__",
        "_check_setup_finished",
        "name",
        "logger",
        "jinja_env",
        "create_jinja_environment",
        "make_config",
        "make_aborter",
        "auto_find_instance_path",
        "create_global_jinja_loader",
        "select_jinja_autoescape",
        "debug",
        "debug",
        "register_blueprint",
        "iter_blueprints",
        "add_url_rule",
        "template_filter",
        "add_template_filter",
        "template_test",
        "add_template_test",
        "template_global",
        "add_template_global",
        "teardown_appcontext",
        "shell_context_processor",
        "_find_error_handler",
        "trap_http_exception",
        "should_ignore_error",
        "redirect",
        "inject_url_defaults",
        "handle_url_build_error"
      ]
    }
  ],
  "./flask/src/flask/sansio/scaffold.py": [
    {
      "class_name": "Scaffold",
      "class_methods": [
        "__init__",
        "__repr__",
        "_check_setup_finished",
        "static_folder",
        "static_folder",
        "has_static_folder",
        "static_url_path",
        "static_url_path",
        "jinja_loader",
        "_method_route",
        "get",
        "post",
        "put",
        "delete",
        "patch",
        "route",
        "add_url_rule",
        "endpoint",
        "before_request",
        "after_request",
        "teardown_request",
        "context_processor",
        "url_value_preprocessor",
        "url_defaults",
        "errorhandler",
        "register_error_handler",
        "_get_exc_class_and_code"
      ]
    }
  ],
  "./flask/src/flask/json/provider.py": [
    {
      "class_name": "JSONProvider",
      "class_methods": [
        "__init__",
        "dumps",
        "dump",
        "loads",
        "load",
        "_prepare_response_obj",
        "response"
      ]
    },
    {
      "class_name": "DefaultJSONProvider",
      "class_methods": [
        "dumps",
        "loads",
        "response"
      ]
    }
  ],
  "./flask/src/flask/json/tag.py": [
    {
      "class_name": "JSONTag",
      "class_methods": [
        "__init__",
        "check",
        "to_json",
        "to_python",
        "tag"
      ]
    },
    {
      "class_name": "TagDict",
      "class_methods": [
        "check",
        "to_json",
        "to_python"
      ]
    },
    {
      "class_name": "PassDict",
      "class_methods": [
        "check",
        "to_json"
      ]
    },
    {
      "class_name": "TagTuple",
      "class_methods": [
        "check",
        "to_json",
        "to_python"
      ]
    },
    {
      "class_name": "PassList",
      "class_methods": [
        "check",
        "to_json"
      ]
    },
    {
      "class_name": "TagBytes",
      "class_methods": [
        "check",
        "to_json",
        "to_python"
      ]
    },
    {
      "class_name": "TagMarkup",
      "class_methods": [
        "check",
        "to_json",
        "to_python"
      ]
    },
    {
      "class_name": "TagUUID",
      "class_methods": [
        "check",
        "to_json",
        "to_python"
      ]
    },
    {
      "class_name": "TagDateTime",
      "class_methods": [
        "check",
        "to_json",
        "to_python"
      ]
    },
    {
      "class_name": "TaggedJSONSerializer",
      "class_methods": [
        "__init__",
        "register",
        "tag",
        "untag",
        "_untag_scan",
        "dumps",
        "loads"
      ]
    }
  ]
}